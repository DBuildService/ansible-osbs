---
- name: install packages required by osbs
  yum: name={{ item }} state=installed
  with_items:
  - bind-utils
  - iptables-services
  - bridge-utils
  - docker
  - docker-registry

### docker service ###

- name: ensure docker is running
  service: name=docker state=started enabled=yes

- name: configure docker
  template: src=sysconfig-docker.j2 dest=/etc/sysconfig/docker
  notify: restart docker

### openshift service ###

# Permanent rules aren't applied immediately. Starting with ansible 1.9,
# these two rules can be merged into one with permanent=true immediate=true.
- name: open openshift port in the firewall
  firewalld: port={{ openshift_port }}/tcp state=enabled permanent={{ item }}
  with_items:
  - true
  - false
  when: not behind_auth_proxy and manage_firewall

- name: close openshift port in the firewall
  firewalld: port={{ openshift_port }}/tcp state=disabled permanent={{ item }}
  with_items:
  - true
  - false
  when: behind_auth_proxy and manage_firewall

- name: modifications in /etc/sysconfig/openshift
  copy: src=sysconfig-openshift-{{ item }} dest=/etc/sysconfig/openshift-{{ item }}
  with_items:
  - master
  - node

- name: generate basic openshift configuration and certificates
  command: openshift start --write-config=/etc/openshift
  args:
    chdir: "{{ openshift_home }}"
    creates: /etc/openshift/node-{{ ansible_fqdn }}/node-config.yaml

- name: link /etc/openshift/node to actual node directory
  file: path=/etc/openshift/node src=/etc/openshift/node-{{ ansible_fqdn }} force=yes state=link

- name: configure openshift master
  template: src=master.yaml.j2 dest=/etc/openshift/master/master-config.yaml
  notify: restart openshift-master

- name: configure openshift node
  template: src=node.yaml.j2 dest=/etc/openshift/node/node-config.yaml
  notify: restart openshift-node

- name: generate cert for authenticating proxy - self-signed certificate
  command: >
    openssl req -new -nodes -x509
    -subj "/C=CZ/ST=SelfSigned/L=SelfSigned/O=IT/CN={{ ansible_fqdn }}"
    -days 3650
    -keyout {{ proxy_auth_key_file }}
    -out {{ proxy_auth_cert_file }}
    -extensions v3_ca
  args:
    creates: "{{ proxy_auth_cert_file }}"
  when: behind_auth_proxy and proxy_auth_generate_selfsigned
  register: auth_proxy_cert

- name: generate cert for authenticating proxy - convert privkey to rsa
  command: openssl rsa -in {{ proxy_auth_key_file }} -out {{ proxy_auth_key_file }}
  when: auth_proxy_cert.changed

# We need to have openshift restarted in order to configure authentication.
- meta: flush_handlers

- name: ensure openshift is running
  service: name=openshift-{{ item }} state=started enabled=yes
  with_items:
  - master
  - node

- name: wait for openshift to start accepting connections
  wait_for: port={{ openshift_port }} timeout=30

# Set up authorization policy. If we are behind proxy then assign authenticated
# users the "osbs-builder" role which can start builds and watch build logs.
# If we are not (=debug), add both authenticated and unauthenticated users to
# the role.
- name: openshift auth - clear legacy configuration
  command: oadm policy remove-role-from-group edit system:authenticated system:unauthenticated
  environment: oc_environment
  register: command_result
  failed_when: "command_result | failed and 'unable to locate RoleBinding' not in command_result.stderr"
  tags: authorization

- name: copy osbs-builder role definition
  copy: src=openshift-role-osbs-builder.yml dest={{ openshift_home }}/role-osbs-builder.yml
  tags: authorization

- name: import the osbs-builder role
  command: oc replace --force=true --filename={{ openshift_home }}/role-osbs-builder.yml
  environment: oc_environment
  tags: authorization

- name: copy role bindings
  template: src=openshift-rolebinding.yml.j2 dest={{ openshift_home }}/rolebinding-{{ item.name }}.yml
  with_items:
  - name: osbs-readonly
    role: view
    users: "{{ readonly_users }}"
    groups: "{{ readonly_groups }}"
  - name: osbs-readwrite
    role: osbs-builder
    users: "{{ readwrite_users }}"
    groups: "{{ readwrite_groups }}"
  - name: osbs-admin
    role: cluster-admin
    users: "{{ admin_users }}"
    groups: "{{ admin_groups }}"
  tags: authorization

- name: import the role bindings
  command: oc replace --force=true --filename={{ openshift_home }}/rolebinding-{{ item }}.yml
  environment: oc_environment
  with_items:
  - osbs-readonly
  - osbs-readwrite
  - osbs-admin
  tags: authorization

# Useful when using "oc" to inspect openshift state.
- name: add KUBECONFIG to .bashrc
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.bashrc"
    regexp: "export KUBECONFIG="
    line: "export KUBECONFIG={{ kubeconfig_path }}"
