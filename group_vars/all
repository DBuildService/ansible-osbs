---
# set hostname of the machine
# DO NOT USE THIS IN group_vars/all WHEN DEPLOYING ON MORE THAN ONE MACHINE
#hostname: example.org

# Method to obtain atomic-reactor image, currently supported are:
# pull - pull the image from a registry
# git  - build the image from git repository
#atomic_reactor_source: pull

# Configuration for atomic_reactor_source == pull
#atomic_reactor_pull:
#  registry: registry.hub.docker.com
#  image: slavek/atomic-reactor:latest

# Configuration for atomic_reactor_source == git
#atomic_reactor_git:
#  # base image source
#  base_registry: registry.hub.docker.com
#  base_image: library/fedora:latest
#  # allow retagging the base image to match FROM in Dockerfile
#  base_image_retag: fedora:latest
#  # Dockerfile source
#  git_url: https://github.com/projectatomic/atomic-reactor.git
#  git_branch: master
#  git_subdir: ""
#  git_local_path: "{{ ansible_env.HOME }}/atomic-reactor-buildroot"

# Docker needs to know which registries are insecure. If you're pulling
# atomic-reactor image from insecure registry you also need to put it here.
#osbs_docker_insecure_registries:
#  - registry.example.org

# Set to false if you don't use firewalld or do not want the playbook to modify it.
#osbs_manage_firewalld: true

# Expose the OpenShift port to the outside world? Set this to false when using
# authenticating proxy on the localhost. Has no effect if osbs_manage_firewalld
# is false.
#osbs_master_expose_port: true

# Paths to SSL certificates the for the authenticating proxy that will be
# presented to the clients. If they are not found and
# osbs_proxy_ssl_generate_selfsigned is true then self-signed certificate will
# be generated.
#osbs_proxy_ssl_generate_selfsigned: true
#osbs_proxy_ssl_cert_file: /etc/pki/tls/certs/{{ ansible_fqdn }}.crt
#osbs_proxy_ssl_key_file: /etc/pki/tls/private/{{ ansible_fqdn }}.key

# Kerberos auth - please note that kerberos client has to be set up on the
# host, possibly using third-party ansible role.
#osbs_proxy_type: kerberos
#osbs_proxy_kerberos_keytab_file: /etc/httpd/HTTP-{{ ansible_fqdn }}.keytab

# HTTP plain auth using static .htpasswd file.
#osbs_proxy_type: htpasswd
#osbs_proxy_htpasswd_users:
#  - user: test
#    password: test

# Manually assign openshift user account to an IP or IP range.
#osbs_proxy_ip_whitelist:
#  - subnet: 1.2.3.4
#    user: kojibuilder

# OpenShift authorization - which users should be assigned the view (readonly),
# osbs-builder (readwrite), and cluster-admin (admin) roles.

# In default configuration, everyone has read/write access:
#osbs_readonly_users: []
#osbs_readonly_groups: []
#osbs_readwrite_users: []
#osbs_readwrite_groups:
#  - system:authenticated
#  - system:unauthenticated
#osbs_admin_users: []
#osbs_admin_groups: []

# Development w/ auth proxy:
#osbs_readonly_users: []
#osbs_readonly_groups: []
#osbs_readwrite_users: []
#osbs_readwrite_groups:
#  - system:authenticated
#osbs_admin_users: []
#osbs_admin_groups: []

# Example production configuration:
#osbs_readonly_users: []
#osbs_readonly_groups:
#  - system:authenticated
#osbs_osbs_readwrite_groups: []
#osbs_osbs_readwrite_users:
#  - kojibuilder
#  - "{{ ansible_hostname }}"
#osbs_admin_users:
#  - foo@EXAMPLE.COM
#  - bar@EXAMPLE.COM
#osbs_admin_groups: []
